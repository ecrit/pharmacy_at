package at.medevit.ecrit.pharmacy_at.application.util;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.eclipse.core.runtime.FileLocator;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Shell;

import at.medevit.ecrit.pharmacy_at.core.SampleModel;
import at.medevit.ecrit.pharmacy_at.model.Article;
import at.medevit.ecrit.pharmacy_at.model.Pharmacy;
import at.medevit.ecrit.pharmacy_at.model.Prescription;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PrintInvoicePDF {
	private static String FILE = "C:/Users/" + System.getProperty("user.name")
		+ "/Desktop/Invoice.pdf";
	private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
	private static Font tinyBold = new Font(Font.FontFamily.HELVETICA, 11, Font.BOLD);
	private static Font tableHeaderFont = new Font(Font.FontFamily.HELVETICA, 11, Font.BOLD,
		BaseColor.GRAY);
	
	static HashMap<String, Integer> amountMap;
	static List<Article> noDuplicateArticles;
	static float totalPayment = 0.0f;
	static float totalRefund = 0.0f;
	
	public PrintInvoicePDF(Shell shell, HashMap<String, Integer> amountMap,
		List<Article> noDuplicateArticles){
		try {
			this.amountMap = amountMap;
			this.noDuplicateArticles = noDuplicateArticles;
			
			DirectoryDialog dirDialog = new DirectoryDialog(shell);
			dirDialog.setFilterPath("c:\\");
			dirDialog.setText("Select a directory to save the invoice");
			FILE = dirDialog.open() + "/Invoice.pdf";
			
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addAddressHeader(document);
			addContent(document);
			document.close();
		} catch (DocumentException | IOException e) {
			e.printStackTrace();
		}
		
	}
	
	private static void addMetaData(Document document){
		document.addAuthor(System.getProperty("user.name"));
		document.addCreationDate();
		document.addProducer();
		document.addCreator(SampleModel.getPharmacy().getName());
		document.addTitle("Invoice");
	}
	
	private static void addAddressHeader(Document document) throws DocumentException,
		MalformedURLException, IOException{
		Paragraph preface = new Paragraph();
		
		URL url = PrintInvoicePDF.class.getResource("/icons/ecrit_logo.png");
		Image companyLogo = Image.getInstance(FileLocator.toFileURL(url));
		companyLogo.setAbsolutePosition(25, 730);
		companyLogo.scalePercent(20);
		preface.add(companyLogo);
		
		// Will create: Report generated by: _name, _date
		Pharmacy pharmacy = SampleModel.getPharmacy();
		Paragraph pharmacyName = new Paragraph(pharmacy.getName(), smallBold);
		pharmacyName.setAlignment(Element.ALIGN_RIGHT);
		preface.add(pharmacyName);
		
		Paragraph adrStreet = new Paragraph(pharmacy.getAddress().getStreet(), tinyBold);
		adrStreet.setAlignment(Element.ALIGN_RIGHT);
		preface.add(adrStreet);
		
		Paragraph adrPostCodeCity =
			new Paragraph(pharmacy.getAddress().getPostCode() + " "
				+ pharmacy.getAddress().getTown(), tinyBold);
		adrPostCodeCity.setAlignment(Element.ALIGN_RIGHT);
		preface.add(adrPostCodeCity);
		
		Paragraph adrCountry = new Paragraph(pharmacy.getAddress().getCountry(), tinyBold);
		adrCountry.setAlignment(Element.ALIGN_RIGHT);
		preface.add(adrCountry);
		
		addEmptyLine(preface, 1);
		preface
			.add(new Paragraph("Invoice [Nr: " + SampleModel.getInvoice().getId() + "]", catFont));
		preface.add(new Paragraph("Created by: " + System.getProperty("user.name") + ","
			+ new Date(), smallBold));
		addEmptyLine(preface, 3);
		
		document.add(preface);
	}
	
	private static void addContent(Document document) throws DocumentException{
		Paragraph invParagraph = new Paragraph();
		createTable(invParagraph);
		addEmptyLine(invParagraph, 1);
		createRefundTable(invParagraph);
		addEmptyLine(invParagraph, 1);
		
		float finalSum = totalPayment - totalRefund;
		Paragraph sum =
			new Paragraph("Total Payment: " + String.format("%.2f", finalSum) + " €", smallBold);
		sum.setAlignment(Element.ALIGN_RIGHT);
		invParagraph.add(sum);
		document.add(invParagraph);
	}
	
	private static void createTable(Paragraph paragraph) throws DocumentException{
		PdfPTable table = new PdfPTable(4);
		table.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.setWidths(new int[] {
			70, 350, 100, 100
		});
		
		PdfPCell c1 = new PdfPCell(new Phrase("Units", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Article", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Single Price", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Price", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		table.setHeaderRows(1);
		
		totalPayment = 0.0f;
		for (Article a : noDuplicateArticles) {
			int amount = amountMap.get(a.getName());
			table.addCell(amount + "");
			table.addCell(a.getName());
			table.addCell(a.getPrice() + " €");
			table.addCell((a.getPrice() * amount) + " €");
			totalPayment += a.getPrice() * amount;
		}
		table.addCell("");
		table.addCell("");
		table.addCell("");
		PdfPCell sum =
			new PdfPCell(new Phrase(String.format("%.2f", totalPayment) + " €", smallBold));
		table.addCell(sum);
		
		paragraph.add(table);
	}
	
	private static void createRefundTable(Paragraph paragraph) throws DocumentException{
		PdfPTable table = new PdfPTable(4);
		table.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.setWidths(new int[] {
			70, 200, 250, 100
		});
		
		PdfPCell c1 = new PdfPCell(new Phrase("Id", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Issuing Practitioner", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Articles", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Price", tableHeaderFont));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		
		table.setHeaderRows(1);
		
		for (Prescription p : SampleModel.getInvoice().getPrescription()) {
			StringBuilder articleList = new StringBuilder();
			totalRefund = 0.0f;
			for (Article a : p.getArticle()) {
				articleList.append(a.getName());
				articleList.append(", ");
				totalRefund += a.getPrice();
			}
			articleList.replace(articleList.lastIndexOf(","), articleList.length(), "");
			table.addCell(p.getNumber() + "");
			table.addCell(p.getIssuingPractitioner());
			table.addCell(articleList.toString());
			table.addCell("-" + totalRefund + " €");
		}
		table.addCell("");
		table.addCell("");
		table.addCell("");
		PdfPCell sum =
			new PdfPCell(new Phrase("-" + String.format("%.2f", totalRefund) + " €", smallBold));
		table.addCell(sum);
		
		paragraph.add(table);
	}
	
	private static void addEmptyLine(Paragraph paragraph, int number){
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
	
}
